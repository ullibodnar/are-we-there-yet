{"version":3,"sources":["hooks/useWindowDimensions/index.js","components/DistanceBar/TimeBox/index.js","components/DistanceBar/index.js","App.js","serviceWorker.js","index.js"],"names":["initialDimensions","width","window","innerWidth","height","innerHeight","TimeBox","styled","div","_templateObject","flicker","keyframes","_templateObject2","Time","p","_templateObject3","_ref","LayeredTime","_templateObject4","TitleBox","_templateObject5","IndNumber","span","_templateObject6","DistanceBar_TimeBox","_ref2","_ref2$time","time","title","react_default","a","createElement","Fragment","concat","charAt","DistanceBar","DistanceBar_templateObject","initialState","currentDate","moment","pickedDate","difference","randoms","Math","random","addZeros","ex","console","log","tz","guess","components_DistanceBar","setCelebrate","_useState","useState","_useState2","Object","slicedToArray","state","setState","distance","diff","useEffect","m","objectSpread","days","floor","hours","minutes","seconds","milliseconds","StyledHeader","App_templateObject","StyledTitle","h1","App_templateObject2","StyledBody","App_templateObject3","Boolean","location","hostname","match","ReactDOM","render","celebrate","_useWindowDimensions","dimensions","setDimensions","setEvent","addEventListener","removeEventListener","useWindowDimensions","react_confetti_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7312c6a3.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\n\nconst initialDimensions = {\n  width: window.innerWidth,\n  height: window.innerHeight\n}\n\nexport default () => {\n  const [dimensions, setDimensions] = useState(initialDimensions)\n\n  useEffect(() => {\n    const setEvent = () => {\n      setDimensions({ width: window.innerWidth, height: window.innerHeight })\n    }\n    window.addEventListener('resize', setEvent())\n\n    return () => window.removeEventListener('resize', setEvent())\n  })\n\n  return dimensions\n}\n","import React from 'react'\nimport styled, { keyframes } from 'styled-components'\n\nconst TimeBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  font-family: 'Courier New', Courier, monospace;\n  position: relative;\n  width: 14vh;\n\n  @media only screen and (min-width: 480px) {\n    max-width: 11vmin;\n    width: 15%;\n  }\n`\n\nconst flicker = keyframes`\n  0% {\n    opacity: 1\n  }\n    \n  50% {\n    opacity: .80\n\n  }\n  100% {\n    opacity: 1\n\n  }\n`\n\nconst Time = styled.p`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 10vh;\n  margin: 0 auto;\n  width: 100%;\n  font-family: 'Nixie One';\n  text-shadow: 0 0 1px #fefc7c, 0 0 3px rgba(255, 217, 54, 0.7), 0 0 5px #ff6a00,\n    0 0 14px #ff6a00, 0 0 17px #ff6a00, 0 0 20px red;\n  animation: ${flicker} ${({ flicker }) => flicker}s infinite;\n\n  @media only screen and (min-width: 480px) {\n    font-size: 8vmin;\n  }\n`\n\nconst LayeredTime = styled.p`\n  display: flex;\n  align-items: center;\n  font-family: 'Nixie One';\n  position: absolute;\n  margin: 0 auto;\n  left: 0;\n  right: 0;\n  opacity: 0.02;\n  justify-content: space-between;\n  font-size: 10vh;\n\n  @media only screen and (min-width: 480px) {\n    font-size: 8vmin;\n  }\n`\n\nconst TitleBox = styled.div`\n  color: white;\n  margin: 0;\n  width: 100%;\n  text-align: center;\n  font-size: 1em;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  flex-grow: 1;\n`\n\nconst IndNumber = styled.span`\n  width: 50%;\n  text-align: center;\n`\n\nexport default ({ time = '00', title, flicker }) => {\n  return (\n    <>\n      <TimeBox>\n        <Time flicker={flicker}>\n          <IndNumber>{`${time}`.charAt(0)}</IndNumber>\n          <IndNumber>{`${time}`.charAt(1)}</IndNumber>\n        </Time>\n        <LayeredTime>\n          <IndNumber>0</IndNumber>\n          <IndNumber>0</IndNumber>\n        </LayeredTime>\n        <LayeredTime>\n          <IndNumber>1</IndNumber>\n          <IndNumber>1</IndNumber>\n        </LayeredTime>\n        <LayeredTime>\n          <IndNumber>2</IndNumber>\n          <IndNumber>2</IndNumber>\n        </LayeredTime>\n        <LayeredTime>\n          <IndNumber>3</IndNumber>\n          <IndNumber>3</IndNumber>\n        </LayeredTime>\n        <LayeredTime>\n          <IndNumber>4</IndNumber>\n          <IndNumber>4</IndNumber>\n        </LayeredTime>\n        <LayeredTime>\n          <IndNumber>5</IndNumber>\n          <IndNumber>5</IndNumber>\n        </LayeredTime>\n        <LayeredTime>\n          <IndNumber>6</IndNumber>\n          <IndNumber>6</IndNumber>\n        </LayeredTime>\n        <LayeredTime>\n          <IndNumber>7</IndNumber>\n          <IndNumber>7</IndNumber>\n        </LayeredTime>\n        <LayeredTime>\n          <IndNumber>8</IndNumber>\n          <IndNumber>8</IndNumber>\n        </LayeredTime>\n        <LayeredTime>\n          <IndNumber>9</IndNumber>\n          <IndNumber>9</IndNumber>\n        </LayeredTime>\n        <TitleBox>{title}</TitleBox>\n      </TimeBox>\n    </>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport moment from 'moment-timezone'\nimport styled from 'styled-components'\n\nimport DayPickerInput from 'react-day-picker/DayPickerInput'\nimport 'react-day-picker/lib/style.css'\n\nimport TimeBox from './TimeBox'\nimport useWindowDimensions from '../../hooks/useWindowDimensions'\n\nconst DistanceBar = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-direction: column;\n\n  @media only screen and (min-width: 480px) {\n    flex-direction: row;\n  }\n`\n\n// 20190502T0805\n\nconst initialState = {\n  currentDate: moment(),\n  pickedDate: moment('20220107T0805'),\n  difference: {},\n  randoms: [\n    Math.random(),\n    Math.random(),\n    Math.random(),\n    Math.random(),\n    Math.random()\n  ]\n}\n\nconsole.log(moment.tz.guess())\n\nfunction addZeros (ex) {\n  if (ex < 10) {\n    if (ex <= 0) {\n      return `00`\n    } else {\n      return `0${ex}`\n    }\n  }\n  return ex\n}\n\nfunction getTime (m) {\n  return {\n    days: addZeros(Math.floor(m / 1000 / 60 / 60 / 24)),\n    hours: addZeros(Math.floor((m / 1000 / 60 / 60) % 24)),\n    minutes: addZeros(Math.floor((m / 1000 / 60) % 60)),\n    seconds: addZeros(Math.floor((m / 1000) % 60)),\n    milliseconds: addZeros(Math.floor(m % 1000))\n  }\n}\n\nexport default ({ setCelebrate }) => {\n  const [state, setState] = useState(initialState)\n  const { currentDate, pickedDate, difference, randoms } = state\n\n  const distance = pickedDate.diff(currentDate)\n\n  // const { width } = useWindowDimensions()\n\n  useEffect(() => {\n    if (distance <= 0) {\n      setCelebrate(true)\n    }\n    setState({\n      ...state,\n      currentDate: moment(),\n      difference: getTime(distance)\n    })\n  })\n\n  return (\n    <>\n      <DistanceBar>\n        <TimeBox time={difference.days} title='days' flicker={randoms[0]} />\n        <TimeBox time={difference.hours} title={`hrs`} flicker={randoms[1]} />\n        <TimeBox time={difference.minutes} title={`min`} flicker={randoms[2]} />\n        <TimeBox time={difference.seconds} title={`sec`} flicker={randoms[3]} />\n        <TimeBox\n          time={difference.milliseconds}\n          title={`100's`}\n          flicker={randoms[4]}\n        />\n      </DistanceBar>\n      {/* <DayPickerInput value={pickedDate} /> */}\n    </>\n  )\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Confetti from 'react-confetti'\n\nimport useWindowDimensions from './hooks/useWindowDimensions'\n\nimport DistanceBar from './components/DistanceBar'\n\nconst StyledHeader = styled.div`\n  width: 80%;\n  margin: 0 auto;\n`\n\nconst StyledTitle = styled.h1`\n  font-family: 'Courier New', Courier, monospace;\n  opacity: 0.2;\n  font-weight: 500;\n  text-align: center;\n`\n\nconst StyledBody = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 10px;\n`\n\nexport default () => {\n  const [celebrate, setCelebrate] = useState(false)\n\n  const { width, height } = useWindowDimensions()\n\n  return (\n    <>\n      {celebrate ? <Confetti width={width} height={height} /> : null}\n\n      <StyledHeader>\n        <StyledTitle>Are We There Yet?</StyledTitle>\n      </StyledHeader>\n      <StyledBody>\n        <DistanceBar setCelebrate={setCelebrate} />\n      </StyledBody>\n    </>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}