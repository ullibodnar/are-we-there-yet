{"version":3,"sources":["components/DistanceBar/TimeBox/index.js","components/DistanceBar/index.js","App.js","serviceWorker.js","index.js"],"names":["TimeBox","styled","div","_templateObject","flicker","keyframes","_templateObject2","Time","p","_templateObject3","LayeredTime","_templateObject4","TitleBox","_templateObject5","IndNumber","span","_templateObject6","DistanceBar_TimeBox","_ref","_ref$time","time","title","react_default","a","createElement","Fragment","concat","charAt","DistanceBar","DistanceBar_templateObject","initialState","currentDate","moment","pickedDate","difference","addZeros","ex","components_DistanceBar","_useState","useState","_useState2","Object","slicedToArray","state","setState","distance","diff","useEffect","m","objectSpread","days","Math","floor","hours","minutes","seconds","milliseconds","StyledHeader","App_templateObject","StyledTitle","h1","App_templateObject2","StyledBody","App_templateObject3","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0615a2b4.chunk.js","sourcesContent":["import React from 'react'\nimport styled, { keyframes } from 'styled-components'\n\nconst TimeBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  font-family: 'Courier New', Courier, monospace;\n  width: 15%;\n  max-width: 5em;\n  position: relative;\n`\n\nconst flicker = keyframes`\n  0% {\n    opacity: 1\n  }\n    \n  50% {\n    opacity: 0.8\n\n  }\n  100% {\n    opacity: 1\n\n  }\n`\n\nconst Time = styled.p`\n  display: flex;\n  justify-content: space-between;\n  font-size: 4em;\n  margin: 0 auto;\n  width: 100%;\n  flex-grow: 4;\n  vertical-align: middle;\n  font-family: 'Nixie One';\n  text-shadow: 0 0 1px #fefc7c, 0 0 3px rgba(255, 217, 54, 0.7), 0 0 5px #ff6a00,\n    0 0 14px #ff6a00, 0 0 17px #ff6a00, 0 0 20px red;\n  animation: ${flicker} 0.001s infinite;\n`\n\nconst LayeredTime = styled.p`\n  font-family: 'Nixie One';\n  position: absolute;\n  margin: 0 auto;\n  font-size: 4em;\n  left: 0;\n  right: 0;\n  text-align: center;\n  opacity: 0.02;\n  display: flex;\n  justify-content: space-between;\n`\n\nconst TitleBox = styled.div`\n  color: white;\n  margin: 0;\n  width: 100%;\n  text-align: center;\n  font-size: 1em;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  flex-grow: 1;\n`\n\nconst IndNumber = styled.span`\n  width: 50%;\n  text-align: center;\n`\n\nexport default ({ time = '00', title }) => {\n  return (\n    <>\n      <TimeBox>\n        <Time>\n          <IndNumber>{`${time}`.charAt(0)}</IndNumber>\n          <IndNumber>{`${time}`.charAt(1)}</IndNumber>\n        </Time>\n        <LayeredTime>\n          <IndNumber>0</IndNumber>\n          <IndNumber>0</IndNumber>\n        </LayeredTime>\n        <LayeredTime>\n          <IndNumber>1</IndNumber>\n          <IndNumber>1</IndNumber>\n        </LayeredTime>\n        <LayeredTime>\n          <IndNumber>2</IndNumber>\n          <IndNumber>2</IndNumber>\n        </LayeredTime>\n        <LayeredTime>\n          <IndNumber>3</IndNumber>\n          <IndNumber>3</IndNumber>\n        </LayeredTime>\n        <LayeredTime>\n          <IndNumber>4</IndNumber>\n          <IndNumber>4</IndNumber>\n        </LayeredTime>\n        <LayeredTime>\n          <IndNumber>5</IndNumber>\n          <IndNumber>5</IndNumber>\n        </LayeredTime>\n        <LayeredTime>\n          <IndNumber>6</IndNumber>\n          <IndNumber>6</IndNumber>\n        </LayeredTime>\n        <LayeredTime>\n          <IndNumber>7</IndNumber>\n          <IndNumber>7</IndNumber>\n        </LayeredTime>\n        <LayeredTime>\n          <IndNumber>8</IndNumber>\n          <IndNumber>8</IndNumber>\n        </LayeredTime>\n        <LayeredTime>\n          <IndNumber>9</IndNumber>\n          <IndNumber>9</IndNumber>\n        </LayeredTime>\n        <TitleBox>{title}</TitleBox>\n      </TimeBox>\n    </>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport moment from 'moment'\nimport styled from 'styled-components'\n\nimport TimeBox from './TimeBox'\n\nconst DistanceBar = styled.div`\n  display: flex;\n  justify-content: space-between;\n  height: 6em;\n`\n\n// 20190525\n\nconst initialState = {\n  currentDate: moment(),\n  pickedDate: moment('20190502'),\n  difference: {}\n}\n\nfunction addZeros (ex) {\n  if (ex < 10) {\n    if (ex <= 0) {\n      return `00`\n    } else {\n      return `0${ex}`\n    }\n  }\n  return ex\n}\n\nfunction getTime (m) {\n  return {\n    days: addZeros(Math.floor(m / 1000 / 60 / 60 / 24)),\n    hours: addZeros(Math.floor((m / 1000 / 60 / 60) % 24)),\n    minutes: addZeros(Math.floor((m / 1000 / 60) % 60)),\n    seconds: addZeros(Math.floor((m / 1000) % 60)),\n    milliseconds: addZeros(Math.floor((m % 1000) / 10))\n  }\n}\n\nexport default () => {\n  const [state, setState] = useState(initialState)\n  const { currentDate, pickedDate, difference } = state\n\n  const distance = pickedDate.diff(currentDate)\n\n  useEffect(() => {\n    setState({ ...state, currentDate: moment(), difference: getTime(distance) })\n  })\n\n  return (\n    <DistanceBar>\n      <TimeBox time={difference.days} title='days' />\n      <TimeBox time={difference.hours} title={`hrs`} />\n      <TimeBox time={difference.minutes} title={`min`} />\n      <TimeBox time={difference.seconds} title={`sec`} />\n      <TimeBox time={difference.milliseconds} title={`ms`} />\n    </DistanceBar>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport DistanceBar from './components/DistanceBar'\n\nconst StyledHeader = styled.div`\n  width: 80%;\n  margin: 0 auto;\n  text-align: center;\n`\n\nconst StyledTitle = styled.h1`\n  font-family: 'Courier New', Courier, monospace;\n  opacity: 0.2;\n  font-weight: 500;\n`\n\nconst StyledBody = styled.div`\n  max-width: 900px;\n  margin: 0 auto;\n  padding: 0 10px;\n`\n\nexport default () => {\n  return (\n    <>\n      <StyledHeader>\n        <StyledTitle>Are We There Yet?</StyledTitle>\n      </StyledHeader>\n      <StyledBody>\n        <DistanceBar />\n      </StyledBody>\n    </>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}